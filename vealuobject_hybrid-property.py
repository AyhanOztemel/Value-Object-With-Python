from sqlalchemy import TypeDecorator, String, create_engine, Column, Integer, func, text
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.ext.hybrid import hybrid_property
import json

Base = declarative_base()

from sqlalchemy import TypeDecorator, String
import json
from sqlalchemy.sql import column

class ValueType(TypeDecorator):
    """
    SQLAlchemy TypeDecorator sƒ±nƒ±fƒ±: Python nesnelerini veritabanƒ±nda JSON string olarak saklamak,
    ve gerektiƒüinde tekrar Python nesnesine d√∂n√º≈üt√ºrmek i√ßin kullanƒ±lƒ±r.
    √ñrnek: Money, Coordinates gibi Value Object'leri SQLite TEXT s√ºtununda saklamak.
    """

    # 1. Temel SQL Tipi: Bu TypeDecorator hangi temel SQL tipine kar≈üƒ±lƒ±k geliyor?
    impl = String  # SQLite'da TEXT s√ºtunu demektir.

    # 2. √ñnbellek Uyumluluƒüu: SQLAlchemy 2.0+ s√ºr√ºm√ºnde SQL ifadeleri √∂nbelleƒüe alƒ±nƒ±r.
    #    Bu tipin durumu (state) sabit ve g√ºvenli olduƒüu i√ßin √∂nbelleƒüe alƒ±nabilir.
    cache_ok = True  # ‚úÖ Bu tipin √∂nbellek anahtarƒ± √ºretmesi g√ºvenlidir.

    # 3. Yapƒ±cƒ± Metot (Constructor): Bu tip hangi Python sƒ±nƒ±fƒ±nƒ± temsil edecek?
    def __init__(self, cls, *args, **kwargs):
        """
        ValueType'ƒ± bir Python sƒ±nƒ±fƒ± (√∂rneƒüin Money, Coordinates) ile ba≈ülatƒ±r.
        :param cls: JSON'dan geri y√ºklenecek Python sƒ±nƒ±fƒ± (√∂rneƒüin Money)
        """
        super().__init__(*args, **kwargs)  # √úst sƒ±nƒ±fƒ±n (TypeDecorator) __init__ metodunu √ßaƒüƒ±r.
        self.cls = cls  # Saklanacak/geri y√ºklenecek sƒ±nƒ±fƒ± kaydet.

    # 4. Python ‚Üí Veritabanƒ± D√∂n√º≈ü√ºm√º: Python nesnesini veritabanƒ±na yazmadan √∂nce hazƒ±rlar.
    def process_bind_param(self, value, dialect):
        """
        Python nesnesini ‚Üí JSON string'e d√∂n√º≈üt√ºr√ºr (veritabanƒ±na yazƒ±lƒ±rken).
        √ñrnek: Money(15000, "TRY") ‚Üí '{"amount": 15000, "currency": "TRY"}'
        :param value: Python nesnesi (√∂rneƒüin Money instance)
        :param dialect: Kullanƒ±lan veritabanƒ± diyalekti (√∂rneƒüin sqlite, postgresql)
        :return: JSON string veya None
        """
        if value is not None:
            # Nesnenin __dict__'ini al ve JSON string'e d√∂n√º≈üt√ºr.
            # __dict__: Nesnenin t√ºm attribute'larƒ±nƒ± i√ßeren s√∂zl√ºk (√∂rneƒüin {'amount': 15000, 'currency': 'TRY'})
            return json.dumps(value.__dict__)
        return None  # Eƒüer deƒüer None ise, None d√∂nd√ºr.

    # 5. Veritabanƒ± ‚Üí Python D√∂n√º≈ü√ºm√º: Veritabanƒ±ndan okunan deƒüeri Python nesnesine √ßevirir.
    def process_result_value(self, value, dialect):
        """
        Veritabanƒ±ndan gelen JSON string'i ‚Üí Python nesnesine d√∂n√º≈üt√ºr√ºr (okuma sƒ±rasƒ±nda).
        √ñrnek: '{"amount": 15000, "currency": "TRY"}' ‚Üí Money(amount=15000, currency="TRY")
        :param value: Veritabanƒ±ndan gelen JSON string
        :param dialect: Kullanƒ±lan veritabanƒ± diyalekti
        :return: Python nesnesi (self.cls tipinde) veya None
        """
        if value is not None:
            # JSON string'i Python s√∂zl√ºƒü√ºne d√∂n√º≈üt√ºr.
            data = json.loads(value)
            # S√∂zl√ºƒü√º, self.cls sƒ±nƒ±fƒ±nƒ±n yapƒ±cƒ±sƒ±na (**kwargs olarak) vererek yeni bir nesne olu≈ütur.
            # √ñrnek: Money(**{'amount': 15000, 'currency': 'TRY'}) ‚Üí Money(15000, "TRY")
            return self.cls(**data)
        return None  # Eƒüer deƒüer None ise, None d√∂nd√ºr.

    # 6. SQL ƒ∞fade Temsili: Bu s√ºtun SQL ifadelerinde nasƒ±l temsil edilmeli?
    def column_expression(self, col):
        """
        SQLAlchemy, bir s√ºtunu SQL ifadesi i√ßinde (WHERE, ORDER BY vs.) kullanƒ±rken
        bu metodu √ßaƒüƒ±rƒ±r. Biz burada s√ºtunu olduƒüu gibi bƒ±rakƒ±yoruz ‚Äî yani ham JSON string.
        Neden? √á√ºnk√º SQL seviyesinde nesneye d√∂n√º≈üt√ºrme YAPILMAZ ‚Äî sadece Python seviyesinde yapƒ±lƒ±r.
        Filtreleme gibi i≈ülemler i√ßin hybrid_property kullanƒ±lƒ±r (json_extract ile).
        :param col: SQLAlchemy Column nesnesi (√∂rneƒüin Product.price s√ºtunu)
        :return: Deƒüi≈ümeden aynƒ± s√ºtun nesnesi
        """
        return col  # SQL'de s√ºtun hala TEXT (JSON string) olarak kalƒ±r.
# Value Object sƒ±nƒ±flarƒ±
class Money:
    def __init__(self, amount, currency):
        self.amount = amount
        self.currency = currency

class Coordinates:
    def __init__(self, lat, lng):
        self.lat = lat
        self.lng = lng

class FullName:
    def __init__(self, first, last):
        self.first = first
        self.last = last

# Modeller
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy import func

class Product(Base):
    __tablename__ = 'products'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    price = Column(ValueType(Money))  # ValueType ile JSON olarak saklanan value object

    # -------------------------------------------------------------------
    # ‚úÖ HYBRID_PROPERTY: NEDEN KULLANILIR?
    # -------------------------------------------------------------------
    # SQLAlchemy'de, bir s√ºtunun hem Python nesnesi attribute'u gibi 
    # hem de SQL sorgusu i√ßinde (WHERE, ORDER BY vs.) kullanƒ±labilmesini saƒülar.
    # 
    # üéØ AMA√á: 
    #   - Python tarafƒ±nda: p.price_amount ‚Üí p.price.amount gibi doƒüal eri≈üim
    #   - SQL tarafƒ±nda:  .filter(Product.price_amount > 10000) ‚Üí 
    #                    SQL'de: json_extract(price, '$.amount') > 10000
    #
    # ‚ùó NEDEN GEREKLƒ∞?
    #   ValueType sadece Python tarafƒ±nda nesneye √ßevirir. SQL tarafƒ±nda s√ºtun hala JSON string.
    #   Dolayƒ±sƒ±yla doƒürudan "Product.price.amount" ≈üeklinde filtreleme YAPILAMAZ.
    #   hybrid_property, bu iki d√ºnyayƒ± birle≈ütirir: hem Python'da attribute gibi davranƒ±r,
    #   hem de SQL'de fonksiyon √ßaƒürƒ±sƒ±na (json_extract) d√∂n√º≈üt√ºr√ºl√ºr.
    #
    # üîÑ ValueType ƒ∞Lƒ∞≈ûKƒ∞Sƒ∞:
    #   ValueType, veriyi JSON string olarak saklar ve Python'da geri nesneye √ßevirir.
    #   Ama SQL filtrelemesi i√ßin bu yetmez ‚Üí hybrid_property ile SQL tarafƒ±nda
    #   nasƒ±l sorgulanacaƒüƒ±nƒ± MANUEL olarak tanƒ±mlƒ±yoruz.
    # -------------------------------------------------------------------

    @hybrid_property
    def price_amount(self):
        """
        üêç PYTHON TARAFINDA KULLANIM:
        Bu metod, Python nesnesi √ºzerinden eri≈üildiƒüinde √ßalƒ±≈üƒ±r.
        √ñrnek: product.price_amount ‚Üí product.price.amount d√∂ner.
        ValueType sayesinde 'price' zaten Money nesnesi ‚Üí .amount attribute'u var.
        """
        return self.price.amount if self.price else None

    @price_amount.expression
    def price_amount(cls):
        """
        üóÉÔ∏è SQL TARAFINDA KULLANIM:
        Bu metod, SQLAlchemy sorgu ifadesi i√ßinde (√∂rneƒüin .filter() i√ßinde) 
        bu property kullanƒ±ldƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r.
        ValueType ile saklanan JSON string i√ßinden 'amount' alanƒ±nƒ± √ßƒ±karmak i√ßin
        SQLite'ƒ±n json_extract fonksiyonunu kullanƒ±r.
        √ñrnek SQL: json_extract(price, '$.amount')
        """
        return func.json_extract(cls.price, '$.amount')

    # Aynƒ± mantƒ±k currency i√ßin de uygulanabilir:
    @hybrid_property
    def price_currency(self):
        """Python tarafƒ±nda eri≈üim: product.price_currency"""
        return self.price.currency if self.price else None

    @price_currency.expression
    def price_currency(cls):
        """SQL tarafƒ±nda: json_extract(price, '$.currency')"""
        return func.json_extract(cls.price, '$.currency')

class Place(Base):
    __tablename__ = 'places'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    location = Column(ValueType(Coordinates))
    owner_name = Column(ValueType(FullName))

    @hybrid_property
    def location_lat(self):
        return self.location.lat if self.location else None

    @location_lat.expression
    def location_lat(cls):
        return func.json_extract(cls.location, '$.lat')

    @hybrid_property
    def owner_first_name(self):
        return self.owner_name.first if self.owner_name else None

    @owner_first_name.expression
    def owner_first_name(cls):
        return func.json_extract(cls.owner_name, '$.first')

# DB ve session
engine = create_engine('sqlite:///multi_ValueObject.db', echo=False)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# Test verileri
laptop = Product(name="Laptop", price=Money(15000, "TRY"))
cafe = Place(
    name="Kahve D√ºkkanƒ±",
    location=Coordinates(41.0151, 28.9793),
    owner_name=FullName("Ay≈üe", "Yƒ±lmaz")
)

session.add_all([laptop, cafe])
session.commit()

# ‚úÖ Python tarafƒ±nda eri≈üim
p = session.query(Product).first()
print(f"Python: {p.price_amount} {p.price_currency}")  # 15000 TRY

# ‚úÖ SQL filtreleme
expensive = session.query(Product).filter(Product.price_amount > 10000).all()
for p in expensive:
    print(f"SQL Filter: {p.name} - {p.price_amount} {p.price_currency}")

# ‚úÖ Owner name filter
ayse_places = session.query(Place).filter(Place.owner_first_name == 'Ay≈üe').all()
for pl in ayse_places:
    print(f"Ay≈üe'nin yeri: {pl.name}")
